name: GRPC Project CI

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    test:
        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgres:alpine
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: password
                    POSTGRES_DB: project_db
                ports:
                    - "5432:5432"
                options: >-
                    --health-cmd="pg_isready -U postgres -d project_db"
                    --health-interval=10s
                    --health-timeout=5s
                    --health-retries=5

        env:
            POSTGRES_DB: project_db
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: password
            POSTGRES_HOST: postgres
            POSTGRES_PORT: 5432
            PYTHONUNBUFFERED: 1

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Python
              uses: actions/setup-python@v4
              with:
                python-version: '3.13'

            - name: Install dependencies for client
              working-directory: ./client
              run: |
                python -m pip install --upgrade pip
                pip install -r requirements.txt
                pip install pytest

            - name: Run tests for client
              working-directory: ./client
              run: |
                pytest tests --maxfail=1 --disable-warnings -q

            - name: Install dependencies for server
              working-directory: ./server
              run: |
                python -m pip install --upgrade pip
                pip install -r requirements.txt
                pip install pytest

            - name: Run tests for server
              working-directory: ./server
              run: |
                python -m pip install --upgrade pip
                pip install -r requirements.txt
                pip install pytest django psycopg2-binary

            - name: Wait for PostgreSQL to be ready
              run: |
                MAX_RETRIES=5
                RETRY_COUNT=0
                until pg_isready -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB; do
                  RETRY_COUNT=$((RETRY_COUNT+1))
                  echo "Waiting for PostgreSQL to be ready... ($RETRY_COUNT/$MAX_RETRIES)"
                  if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
                    echo "PostgreSQL is not ready after $MAX_RETRIES attempts, exiting."
                    exit 1
                  fi
                  sleep 5
                done
              env:
                POSTGRES_USER: postgres
                POSTGRES_DB: project_db
                POSTGRES_HOST: postgres

            - name: Run Django tests
              working-directory: ./server
              env:
                POSTGRES_DB: project_db
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: password
                POSTGRES_HOST: postgres
                POSTGRES_PORT: 5432
              run: |
                python manage.py test
